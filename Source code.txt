
import tensorflow as tffrom tensorflow.keras import layers, modelsfrom tensorflow.keras.preprocessing.image import ImageDataGenerator
train_data_dir = 'C:\\Users\\Jeyaram\\Downloads\\archive(9)\\train' test_data_dir = 'C:\\Users\\Jeyaram\\Downloads\\archive (9)\\test'


train_datagen = ImageDataGenerator(rescale=1./255)test_datagen = ImageDataGenerator(rescale=1./255)
batch_size = 32img_height = 48img_width = 48
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical', 
    color_mode='grayscale'  )
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    color_mode='grayscale')


num_classes = 7
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 1)))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))model.add(layers.Dense(num_classes, activation='softmax'))
# Assuming 'num_classes' is the number of classes
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#model.save('emotion_model.h5')model.save('my_model.keras')

import cv2import numpy as np
from tensorflow.keras.models import load_model

emotion_model = load_model('my_model.keras')


emotion_labels = ['Angry', 'Disgust', 'Fear', 'happy', 'Sad', 'Surprise', 'neutral']
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')


def predict_emotion(face_roi):
    face_roi_gray = cv2.cvtColor(face_roi, cv2.COLOR_BGR2GRAY)

    face_roi_gray = cv2.resize(face_roi_gray, (48, 48))
    face_roi_gray = face_roi_gray / 255.0  
    face_roi_gray = np.expand_dims(face_roi_gray, axis=0)  

    predicted_emotion = np.argmax(emotion_model.predict(face_roi_gray))
    return emotion_labels[predicted_emotion]
cap = cv2.VideoCapture(0)  
while True:
    ret, frame = cap.read()

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    for (x, y, w, h) in faces:
        
        face_roi = frame[y:y+h, x:x+w]

        emotion = predict_emotion(face_roi)

        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        cv2.putText(frame, emotion, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2, cv2.LINE_AA)
        
    
       
    cv2.imshow('Emotion Recognition', frame)
   

    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()cv2.destroyAllWindows()

import tensorflow as tf
from tensorflow.keras import layers, models                               from tensorflow.keras.preprocessing.image import ImageDataGenerator     import matplotlib.pyplot as plt
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(
    train_generator,
    epochs=5,  
    validation_data=test_generator)  

plt.plot(history.history['loss'], label='Training Loss')plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Percentage Plot')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

 